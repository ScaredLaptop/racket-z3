#lang racket/base
(require ffi/unsafe ffi/unsafe/define "../path.rkt" "types.rkt" "enums.rkt")

(define-z3 _Z3_global_param_set (_fun _string/utf-8 _string/utf-8 -> _void) #:c-id Z3_global_param_set)
(define-z3 _Z3_global_param_reset_all (_fun -> _void) #:c-id Z3_global_param_reset_all)
(define-z3 _Z3_global_param_get (_fun _string/utf-8 _pointer -> _bool) #:c-id Z3_global_param_get)
(define-z3 _Z3_mk_config (_fun -> _Z3_config) #:c-id Z3_mk_config)
(define-z3 _Z3_del_config (_fun _Z3_config -> _void) #:c-id Z3_del_config)
(define-z3 _Z3_set_param_value (_fun _Z3_config _string/utf-8 _string/utf-8 -> _void) #:c-id Z3_set_param_value)
(define-z3 _Z3_mk_context (_fun _Z3_config -> _Z3_context) #:c-id Z3_mk_context)
(define-z3 _Z3_mk_context_rc (_fun _Z3_config -> _Z3_context) #:c-id Z3_mk_context_rc)
(define-z3 _Z3_del_context (_fun _Z3_context -> _void) #:c-id Z3_del_context)
(define-z3 _Z3_inc_ref (_fun _Z3_context _Z3_ast -> _void) #:c-id Z3_inc_ref)
(define-z3 _Z3_dec_ref (_fun _Z3_context _Z3_ast -> _void) #:c-id Z3_dec_ref)
(define-z3 _Z3_update_param_value (_fun _Z3_context _string/utf-8 _string/utf-8 -> _void) #:c-id Z3_update_param_value)
(define-z3 _Z3_get_global_param_descrs (_fun _Z3_context -> _Z3_param_descrs) #:c-id Z3_get_global_param_descrs)
(define-z3 _Z3_interrupt (_fun _Z3_context -> _void) #:c-id Z3_interrupt)
(define-z3 _Z3_enable_concurrent_dec_ref (_fun _Z3_context -> _void) #:c-id Z3_enable_concurrent_dec_ref)
(define-z3 _Z3_mk_params (_fun _Z3_context -> _Z3_params) #:c-id Z3_mk_params)
(define-z3 _Z3_params_inc_ref (_fun _Z3_context _Z3_params -> _void) #:c-id Z3_params_inc_ref)
(define-z3 _Z3_params_dec_ref (_fun _Z3_context _Z3_params -> _void) #:c-id Z3_params_dec_ref)
(define-z3 _Z3_params_set_bool (_fun _Z3_context _Z3_params _Z3_symbol _bool -> _void) #:c-id Z3_params_set_bool)
(define-z3 _Z3_params_set_uint (_fun _Z3_context _Z3_params _Z3_symbol _uint -> _void) #:c-id Z3_params_set_uint)
(define-z3 _Z3_params_set_double (_fun _Z3_context _Z3_params _Z3_symbol _double -> _void) #:c-id Z3_params_set_double)
(define-z3 _Z3_params_set_symbol (_fun _Z3_context _Z3_params _Z3_symbol _Z3_symbol -> _void) #:c-id Z3_params_set_symbol)
(define-z3 _Z3_params_to_string (_fun _Z3_context _Z3_params -> _string/utf-8) #:c-id Z3_params_to_string)
(define-z3 _Z3_params_validate (_fun _Z3_context _Z3_params _Z3_param_descrs -> _void) #:c-id Z3_params_validate)
(define-z3 _Z3_param_descrs_inc_ref (_fun _Z3_context _Z3_param_descrs -> _void) #:c-id Z3_param_descrs_inc_ref)
(define-z3 _Z3_param_descrs_dec_ref (_fun _Z3_context _Z3_param_descrs -> _void) #:c-id Z3_param_descrs_dec_ref)
(define-z3 _Z3_param_descrs_get_kind (_fun _Z3_context _Z3_param_descrs _Z3_symbol -> _Z3_param_kind) #:c-id Z3_param_descrs_get_kind)
(define-z3 _Z3_param_descrs_size (_fun _Z3_context _Z3_param_descrs -> _uint) #:c-id Z3_param_descrs_size)
(define-z3 _Z3_param_descrs_get_name (_fun _Z3_context _Z3_param_descrs _uint -> _Z3_symbol) #:c-id Z3_param_descrs_get_name)
(define-z3 _Z3_param_descrs_get_documentation (_fun _Z3_context _Z3_param_descrs _Z3_symbol -> _string/utf-8) #:c-id Z3_param_descrs_get_documentation)
(define-z3 _Z3_param_descrs_to_string (_fun _Z3_context _Z3_param_descrs -> _string/utf-8) #:c-id Z3_param_descrs_to_string)
(define-z3 _Z3_mk_int_symbol (_fun _Z3_context _int -> _Z3_symbol) #:c-id Z3_mk_int_symbol)
(define-z3 _Z3_mk_string_symbol (_fun _Z3_context _string/utf-8 -> _Z3_symbol) #:c-id Z3_mk_string_symbol)
(define-z3 _Z3_mk_uninterpreted_sort (_fun _Z3_context _Z3_symbol -> _Z3_sort) #:c-id Z3_mk_uninterpreted_sort)
(define-z3 _Z3_mk_type_variable (_fun _Z3_context _Z3_symbol -> _Z3_sort) #:c-id Z3_mk_type_variable)
(define-z3 _Z3_mk_bool_sort (_fun _Z3_context -> _Z3_sort) #:c-id Z3_mk_bool_sort)
(define-z3 _Z3_mk_int_sort (_fun _Z3_context -> _Z3_sort) #:c-id Z3_mk_int_sort)
(define-z3 _Z3_mk_real_sort (_fun _Z3_context -> _Z3_sort) #:c-id Z3_mk_real_sort)
(define-z3 _Z3_mk_bv_sort (_fun _Z3_context _uint -> _Z3_sort) #:c-id Z3_mk_bv_sort)
(define-z3 _Z3_mk_finite_domain_sort (_fun _Z3_context _Z3_symbol _uint64 -> _Z3_sort) #:c-id Z3_mk_finite_domain_sort)
(define-z3 _Z3_mk_array_sort (_fun _Z3_context _Z3_sort _Z3_sort -> _Z3_sort) #:c-id Z3_mk_array_sort)
(define-z3 _Z3_mk_array_sort_n (_fun _Z3_context _uint _pointer _Z3_sort -> _Z3_sort) #:c-id Z3_mk_array_sort_n)
(define-z3 _Z3_mk_tuple_sort (_fun _Z3_context _Z3_symbol _uint _pointer _pointer _pointer _pointer -> _Z3_sort) #:c-id Z3_mk_tuple_sort)
(define-z3 _Z3_mk_enumeration_sort (_fun _Z3_context _Z3_symbol _uint _pointer _pointer _pointer -> _Z3_sort) #:c-id Z3_mk_enumeration_sort)
(define-z3 _Z3_mk_list_sort (_fun _Z3_context _Z3_symbol _Z3_sort _pointer _pointer _pointer _pointer _pointer _pointer -> _Z3_sort) #:c-id Z3_mk_list_sort)
(define-z3 _Z3_mk_constructor (_fun _Z3_context _Z3_symbol _Z3_symbol _uint _pointer _pointer _pointer -> _Z3_constructor) #:c-id Z3_mk_constructor)
(define-z3 _Z3_constructor_num_fields (_fun _Z3_context _Z3_constructor -> _uint) #:c-id Z3_constructor_num_fields)
(define-z3 _Z3_del_constructor (_fun _Z3_context _Z3_constructor -> _void) #:c-id Z3_del_constructor)
(define-z3 _Z3_mk_datatype (_fun _Z3_context _Z3_symbol _uint _pointer -> _Z3_sort) #:c-id Z3_mk_datatype)
(define-z3 _Z3_mk_datatype_sort (_fun _Z3_context _Z3_symbol -> _Z3_sort) #:c-id Z3_mk_datatype_sort)
(define-z3 _Z3_mk_constructor_list (_fun _Z3_context _uint _pointer -> _Z3_constructor_list) #:c-id Z3_mk_constructor_list)
(define-z3 _Z3_del_constructor_list (_fun _Z3_context _Z3_constructor_list -> _void) #:c-id Z3_del_constructor_list)
(define-z3 _Z3_mk_datatypes (_fun _Z3_context _uint _pointer _pointer _pointer -> _void) #:c-id Z3_mk_datatypes)
(define-z3 _Z3_query_constructor (_fun _Z3_context _Z3_constructor _uint _pointer _pointer _pointer -> _void) #:c-id Z3_query_constructor)
(define-z3 _Z3_mk_func_decl (_fun _Z3_context _Z3_symbol _uint _pointer _Z3_sort -> _Z3_func_decl) #:c-id Z3_mk_func_decl)
(define-z3 _Z3_mk_app (_fun _Z3_context _Z3_func_decl _uint _pointer -> _Z3_ast) #:c-id Z3_mk_app)
(define-z3 _Z3_mk_const (_fun _Z3_context _Z3_symbol _Z3_sort -> _Z3_ast) #:c-id Z3_mk_const)
(define-z3 _Z3_mk_fresh_func_decl (_fun _Z3_context _string/utf-8 _uint _pointer _Z3_sort -> _Z3_func_decl) #:c-id Z3_mk_fresh_func_decl)
(define-z3 _Z3_mk_fresh_const (_fun _Z3_context _string/utf-8 _Z3_sort -> _Z3_ast) #:c-id Z3_mk_fresh_const)
(define-z3 _Z3_mk_rec_func_decl (_fun _Z3_context _Z3_symbol _uint _pointer _Z3_sort -> _Z3_func_decl) #:c-id Z3_mk_rec_func_decl)
(define-z3 _Z3_add_rec_def (_fun _Z3_context _Z3_func_decl _uint _pointer _Z3_ast -> _void) #:c-id Z3_add_rec_def)
(define-z3 _Z3_mk_true (_fun _Z3_context -> _Z3_ast) #:c-id Z3_mk_true)
(define-z3 _Z3_mk_false (_fun _Z3_context -> _Z3_ast) #:c-id Z3_mk_false)
(define-z3 _Z3_mk_eq (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_eq)
(define-z3 _Z3_mk_distinct (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_distinct)
(define-z3 _Z3_mk_not (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_not)
(define-z3 _Z3_mk_ite (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_ite)
(define-z3 _Z3_mk_iff (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_iff)
(define-z3 _Z3_mk_implies (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_implies)
(define-z3 _Z3_mk_xor (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_xor)
(define-z3 _Z3_mk_and (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_and)
(define-z3 _Z3_mk_or (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_or)
(define-z3 _Z3_mk_add (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_add)
(define-z3 _Z3_mk_mul (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_mul)
(define-z3 _Z3_mk_sub (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_sub)
(define-z3 _Z3_mk_unary_minus (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_unary_minus)
(define-z3 _Z3_mk_div (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_div)
(define-z3 _Z3_mk_mod (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_mod)
(define-z3 _Z3_mk_rem (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_rem)
(define-z3 _Z3_mk_power (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_power)
(define-z3 _Z3_mk_abs (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_abs)
(define-z3 _Z3_mk_lt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_lt)
(define-z3 _Z3_mk_le (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_le)
(define-z3 _Z3_mk_gt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_gt)
(define-z3 _Z3_mk_ge (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_ge)
(define-z3 _Z3_mk_divides (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_divides)
(define-z3 _Z3_mk_int2real (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_int2real)
(define-z3 _Z3_mk_real2int (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_real2int)
(define-z3 _Z3_mk_is_int (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_is_int)
(define-z3 _Z3_mk_bvnot (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvnot)
(define-z3 _Z3_mk_bvredand (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvredand)
(define-z3 _Z3_mk_bvredor (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvredor)
(define-z3 _Z3_mk_bvand (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvand)
(define-z3 _Z3_mk_bvor (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvor)
(define-z3 _Z3_mk_bvxor (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvxor)
(define-z3 _Z3_mk_bvnand (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvnand)
(define-z3 _Z3_mk_bvnor (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvnor)
(define-z3 _Z3_mk_bvxnor (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvxnor)
(define-z3 _Z3_mk_bvneg (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvneg)
(define-z3 _Z3_mk_bvadd (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvadd)
(define-z3 _Z3_mk_bvsub (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsub)
(define-z3 _Z3_mk_bvmul (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvmul)
(define-z3 _Z3_mk_bvudiv (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvudiv)
(define-z3 _Z3_mk_bvsdiv (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsdiv)
(define-z3 _Z3_mk_bvurem (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvurem)
(define-z3 _Z3_mk_bvsrem (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsrem)
(define-z3 _Z3_mk_bvsmod (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsmod)
(define-z3 _Z3_mk_bvult (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvult)
(define-z3 _Z3_mk_bvslt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvslt)
(define-z3 _Z3_mk_bvule (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvule)
(define-z3 _Z3_mk_bvsle (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsle)
(define-z3 _Z3_mk_bvuge (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvuge)
(define-z3 _Z3_mk_bvsge (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsge)
(define-z3 _Z3_mk_bvugt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvugt)
(define-z3 _Z3_mk_bvsgt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsgt)
(define-z3 _Z3_mk_concat (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_concat)
(define-z3 _Z3_mk_extract (_fun _Z3_context _uint _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_extract)
(define-z3 _Z3_mk_sign_ext (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_sign_ext)
(define-z3 _Z3_mk_zero_ext (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_zero_ext)
(define-z3 _Z3_mk_repeat (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_repeat)
(define-z3 _Z3_mk_bit2bool (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bit2bool)
(define-z3 _Z3_mk_bvshl (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvshl)
(define-z3 _Z3_mk_bvlshr (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvlshr)
(define-z3 _Z3_mk_bvashr (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvashr)
(define-z3 _Z3_mk_rotate_left (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_rotate_left)
(define-z3 _Z3_mk_rotate_right (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_rotate_right)
(define-z3 _Z3_mk_ext_rotate_left (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_ext_rotate_left)
(define-z3 _Z3_mk_ext_rotate_right (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_ext_rotate_right)
(define-z3 _Z3_mk_int2bv (_fun _Z3_context _uint _Z3_ast -> _Z3_ast) #:c-id Z3_mk_int2bv)
(define-z3 _Z3_mk_bv2int (_fun _Z3_context _Z3_ast _bool -> _Z3_ast) #:c-id Z3_mk_bv2int)
(define-z3 _Z3_mk_bvadd_no_overflow (_fun _Z3_context _Z3_ast _Z3_ast _bool -> _Z3_ast) #:c-id Z3_mk_bvadd_no_overflow)
(define-z3 _Z3_mk_bvadd_no_underflow (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvadd_no_underflow)
(define-z3 _Z3_mk_bvsub_no_overflow (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsub_no_overflow)
(define-z3 _Z3_mk_bvsub_no_underflow (_fun _Z3_context _Z3_ast _Z3_ast _bool -> _Z3_ast) #:c-id Z3_mk_bvsub_no_underflow)
(define-z3 _Z3_mk_bvsdiv_no_overflow (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvsdiv_no_overflow)
(define-z3 _Z3_mk_bvneg_no_overflow (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvneg_no_overflow)
(define-z3 _Z3_mk_bvmul_no_overflow (_fun _Z3_context _Z3_ast _Z3_ast _bool -> _Z3_ast) #:c-id Z3_mk_bvmul_no_overflow)
(define-z3 _Z3_mk_bvmul_no_underflow (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_bvmul_no_underflow)
(define-z3 _Z3_mk_select (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_select)
(define-z3 _Z3_mk_select_n (_fun _Z3_context _Z3_ast _uint _pointer -> _Z3_ast) #:c-id Z3_mk_select_n)
(define-z3 _Z3_mk_store (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_store)
(define-z3 _Z3_mk_store_n (_fun _Z3_context _Z3_ast _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_store_n)
(define-z3 _Z3_mk_const_array (_fun _Z3_context _Z3_sort _Z3_ast -> _Z3_ast) #:c-id Z3_mk_const_array)
(define-z3 _Z3_mk_map (_fun _Z3_context _Z3_func_decl _uint _pointer -> _Z3_ast) #:c-id Z3_mk_map)
(define-z3 _Z3_mk_array_default (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_array_default)
(define-z3 _Z3_mk_as_array (_fun _Z3_context _Z3_func_decl -> _Z3_ast) #:c-id Z3_mk_as_array)
(define-z3 _Z3_mk_set_has_size (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_has_size)
(define-z3 _Z3_mk_set_sort (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_mk_set_sort)
(define-z3 _Z3_mk_empty_set (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_empty_set)
(define-z3 _Z3_mk_full_set (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_full_set)
(define-z3 _Z3_mk_set_add (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_add)
(define-z3 _Z3_mk_set_del (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_del)
(define-z3 _Z3_mk_set_union (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_set_union)
(define-z3 _Z3_mk_set_intersect (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_set_intersect)
(define-z3 _Z3_mk_set_difference (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_difference)
(define-z3 _Z3_mk_set_complement (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_complement)
(define-z3 _Z3_mk_set_member (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_member)
(define-z3 _Z3_mk_set_subset (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_set_subset)
(define-z3 _Z3_mk_array_ext (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_array_ext)
(define-z3 _Z3_mk_numeral (_fun _Z3_context _string/utf-8 _Z3_sort -> _Z3_ast) #:c-id Z3_mk_numeral)
(define-z3 _Z3_mk_real (_fun _Z3_context _int _int -> _Z3_ast) #:c-id Z3_mk_real)
(define-z3 _Z3_mk_real_int64 (_fun _Z3_context _int64 _int64 -> _Z3_ast) #:c-id Z3_mk_real_int64)
(define-z3 _Z3_mk_int (_fun _Z3_context _int _Z3_sort -> _Z3_ast) #:c-id Z3_mk_int)
(define-z3 _Z3_mk_unsigned_int (_fun _Z3_context _uint _Z3_sort -> _Z3_ast) #:c-id Z3_mk_unsigned_int)
(define-z3 _Z3_mk_int64 (_fun _Z3_context _int64 _Z3_sort -> _Z3_ast) #:c-id Z3_mk_int64)
(define-z3 _Z3_mk_unsigned_int64 (_fun _Z3_context _uint64 _Z3_sort -> _Z3_ast) #:c-id Z3_mk_unsigned_int64)
(define-z3 _Z3_mk_bv_numeral (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_bv_numeral)
(define-z3 _Z3_mk_seq_sort (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_mk_seq_sort)
(define-z3 _Z3_is_seq_sort (_fun _Z3_context _Z3_sort -> _bool) #:c-id Z3_is_seq_sort)
(define-z3 _Z3_get_seq_sort_basis (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_get_seq_sort_basis)
(define-z3 _Z3_mk_re_sort (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_mk_re_sort)
(define-z3 _Z3_is_re_sort (_fun _Z3_context _Z3_sort -> _bool) #:c-id Z3_is_re_sort)
(define-z3 _Z3_get_re_sort_basis (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_get_re_sort_basis)
(define-z3 _Z3_mk_string_sort (_fun _Z3_context -> _Z3_sort) #:c-id Z3_mk_string_sort)
(define-z3 _Z3_mk_char_sort (_fun _Z3_context -> _Z3_sort) #:c-id Z3_mk_char_sort)
(define-z3 _Z3_is_string_sort (_fun _Z3_context _Z3_sort -> _bool) #:c-id Z3_is_string_sort)
(define-z3 _Z3_is_char_sort (_fun _Z3_context _Z3_sort -> _bool) #:c-id Z3_is_char_sort)
(define-z3 _Z3_mk_string (_fun _Z3_context _string/utf-8 -> _Z3_ast) #:c-id Z3_mk_string)
(define-z3 _Z3_mk_lstring (_fun _Z3_context _uint _string/utf-8 -> _Z3_ast) #:c-id Z3_mk_lstring)
(define-z3 _Z3_mk_u32string (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_u32string)
(define-z3 _Z3_is_string (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_string)
(define-z3 _Z3_get_string (_fun _Z3_context _Z3_ast -> _string/utf-8) #:c-id Z3_get_string)
(define-z3 _Z3_get_lstring (_fun _Z3_context _Z3_ast _pointer -> _string/utf-8) #:c-id Z3_get_lstring)
(define-z3 _Z3_get_string_length (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_string_length)
(define-z3 _Z3_get_string_contents (_fun _Z3_context _Z3_ast _uint _pointer -> _void) #:c-id Z3_get_string_contents)
(define-z3 _Z3_mk_seq_empty (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_seq_empty)
(define-z3 _Z3_mk_seq_unit (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_unit)
(define-z3 _Z3_mk_seq_concat (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_seq_concat)
(define-z3 _Z3_mk_seq_prefix (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_prefix)
(define-z3 _Z3_mk_seq_suffix (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_suffix)
(define-z3 _Z3_mk_seq_contains (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_contains)
(define-z3 _Z3_mk_str_lt (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_str_lt)
(define-z3 _Z3_mk_str_le (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_str_le)
(define-z3 _Z3_mk_seq_extract (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_extract)
(define-z3 _Z3_mk_seq_replace (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_replace)
(define-z3 _Z3_mk_seq_at (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_at)
(define-z3 _Z3_mk_seq_nth (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_nth)
(define-z3 _Z3_mk_seq_length (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_length)
(define-z3 _Z3_mk_seq_index (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_index)
(define-z3 _Z3_mk_seq_last_index (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_last_index)
(define-z3 _Z3_mk_seq_map (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_map)
(define-z3 _Z3_mk_seq_mapi (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_mapi)
(define-z3 _Z3_mk_seq_foldl (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_foldl)
(define-z3 _Z3_mk_seq_foldli (_fun _Z3_context _Z3_ast _Z3_ast _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_foldli)
(define-z3 _Z3_mk_str_to_int (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_str_to_int)
(define-z3 _Z3_mk_int_to_str (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_int_to_str)
(define-z3 _Z3_mk_string_to_code (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_string_to_code)
(define-z3 _Z3_mk_string_from_code (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_string_from_code)
(define-z3 _Z3_mk_ubv_to_str (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_ubv_to_str)
(define-z3 _Z3_mk_sbv_to_str (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_sbv_to_str)
(define-z3 _Z3_mk_seq_to_re (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_to_re)
(define-z3 _Z3_mk_seq_in_re (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_seq_in_re)
(define-z3 _Z3_mk_re_plus (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_plus)
(define-z3 _Z3_mk_re_star (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_star)
(define-z3 _Z3_mk_re_option (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_option)
(define-z3 _Z3_mk_re_union (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_re_union)
(define-z3 _Z3_mk_re_concat (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_re_concat)
(define-z3 _Z3_mk_re_range (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_range)
(define-z3 _Z3_mk_re_allchar (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_re_allchar)
(define-z3 _Z3_mk_re_loop (_fun _Z3_context _Z3_ast _uint _uint -> _Z3_ast) #:c-id Z3_mk_re_loop)
(define-z3 _Z3_mk_re_power (_fun _Z3_context _Z3_ast _uint -> _Z3_ast) #:c-id Z3_mk_re_power)
(define-z3 _Z3_mk_re_intersect (_fun _Z3_context _uint _pointer -> _Z3_ast) #:c-id Z3_mk_re_intersect)
(define-z3 _Z3_mk_re_complement (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_complement)
(define-z3 _Z3_mk_re_diff (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_re_diff)
(define-z3 _Z3_mk_re_empty (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_re_empty)
(define-z3 _Z3_mk_re_full (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_mk_re_full)
(define-z3 _Z3_mk_char (_fun _Z3_context _uint -> _Z3_ast) #:c-id Z3_mk_char)
(define-z3 _Z3_mk_char_le (_fun _Z3_context _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_mk_char_le)
(define-z3 _Z3_mk_char_to_int (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_char_to_int)
(define-z3 _Z3_mk_char_to_bv (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_char_to_bv)
(define-z3 _Z3_mk_char_from_bv (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_char_from_bv)
(define-z3 _Z3_mk_char_is_digit (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_mk_char_is_digit)
(define-z3 _Z3_mk_linear_order (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_mk_linear_order)
(define-z3 _Z3_mk_partial_order (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_mk_partial_order)
(define-z3 _Z3_mk_piecewise_linear_order (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_mk_piecewise_linear_order)
(define-z3 _Z3_mk_tree_order (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_mk_tree_order)
(define-z3 _Z3_mk_transitive_closure (_fun _Z3_context _Z3_func_decl -> _Z3_func_decl) #:c-id Z3_mk_transitive_closure)
(define-z3 _Z3_mk_pattern (_fun _Z3_context _uint _pointer -> _Z3_pattern) #:c-id Z3_mk_pattern)
(define-z3 _Z3_mk_bound (_fun _Z3_context _uint _Z3_sort -> _Z3_ast) #:c-id Z3_mk_bound)
(define-z3 _Z3_mk_forall (_fun _Z3_context _uint _uint _pointer _uint _pointer _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_forall)
(define-z3 _Z3_mk_exists (_fun _Z3_context _uint _uint _pointer _uint _pointer _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_exists)
(define-z3 _Z3_mk_quantifier (_fun _Z3_context _bool _uint _uint _pointer _uint _pointer _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_quantifier)
(define-z3 _Z3_mk_quantifier_ex (_fun _Z3_context _bool _uint _Z3_symbol _Z3_symbol _uint _pointer _uint _pointer _uint _pointer _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_quantifier_ex)
(define-z3 _Z3_mk_forall_const (_fun _Z3_context _uint _uint _pointer _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_forall_const)
(define-z3 _Z3_mk_exists_const (_fun _Z3_context _uint _uint _pointer _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_exists_const)
(define-z3 _Z3_mk_quantifier_const (_fun _Z3_context _bool _uint _uint _pointer _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_quantifier_const)
(define-z3 _Z3_mk_quantifier_const_ex (_fun _Z3_context _bool _uint _Z3_symbol _Z3_symbol _uint _pointer _uint _pointer _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_quantifier_const_ex)
(define-z3 _Z3_mk_lambda (_fun _Z3_context _uint _pointer _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_lambda)
(define-z3 _Z3_mk_lambda_const (_fun _Z3_context _uint _pointer _Z3_ast -> _Z3_ast) #:c-id Z3_mk_lambda_const)
(define-z3 _Z3_get_symbol_kind (_fun _Z3_context _Z3_symbol -> _Z3_symbol_kind) #:c-id Z3_get_symbol_kind)
(define-z3 _Z3_get_symbol_int (_fun _Z3_context _Z3_symbol -> _int) #:c-id Z3_get_symbol_int)
(define-z3 _Z3_get_symbol_string (_fun _Z3_context _Z3_symbol -> _string/utf-8) #:c-id Z3_get_symbol_string)
(define-z3 _Z3_get_sort_name (_fun _Z3_context _Z3_sort -> _Z3_symbol) #:c-id Z3_get_sort_name)
(define-z3 _Z3_get_sort_id (_fun _Z3_context _Z3_sort -> _uint) #:c-id Z3_get_sort_id)
(define-z3 _Z3_sort_to_ast (_fun _Z3_context _Z3_sort -> _Z3_ast) #:c-id Z3_sort_to_ast)
(define-z3 _Z3_is_eq_sort (_fun _Z3_context _Z3_sort _Z3_sort -> _bool) #:c-id Z3_is_eq_sort)
(define-z3 _Z3_get_sort_kind (_fun _Z3_context _Z3_sort -> _Z3_sort_kind) #:c-id Z3_get_sort_kind)
(define-z3 _Z3_get_bv_sort_size (_fun _Z3_context _Z3_sort -> _uint) #:c-id Z3_get_bv_sort_size)
(define-z3 _Z3_get_finite_domain_sort_size (_fun _Z3_context _Z3_sort _pointer -> _bool) #:c-id Z3_get_finite_domain_sort_size)
(define-z3 _Z3_get_array_sort_domain (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_get_array_sort_domain)
(define-z3 _Z3_get_array_sort_domain_n (_fun _Z3_context _Z3_sort _uint -> _Z3_sort) #:c-id Z3_get_array_sort_domain_n)
(define-z3 _Z3_get_array_sort_range (_fun _Z3_context _Z3_sort -> _Z3_sort) #:c-id Z3_get_array_sort_range)
(define-z3 _Z3_get_tuple_sort_mk_decl (_fun _Z3_context _Z3_sort -> _Z3_func_decl) #:c-id Z3_get_tuple_sort_mk_decl)
(define-z3 _Z3_get_tuple_sort_num_fields (_fun _Z3_context _Z3_sort -> _uint) #:c-id Z3_get_tuple_sort_num_fields)
(define-z3 _Z3_get_tuple_sort_field_decl (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_get_tuple_sort_field_decl)
(define-z3 _Z3_get_datatype_sort_num_constructors (_fun _Z3_context _Z3_sort -> _uint) #:c-id Z3_get_datatype_sort_num_constructors)
(define-z3 _Z3_get_datatype_sort_constructor (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_get_datatype_sort_constructor)
(define-z3 _Z3_get_datatype_sort_recognizer (_fun _Z3_context _Z3_sort _uint -> _Z3_func_decl) #:c-id Z3_get_datatype_sort_recognizer)
(define-z3 _Z3_get_datatype_sort_constructor_accessor (_fun _Z3_context _Z3_sort _uint _uint -> _Z3_func_decl) #:c-id Z3_get_datatype_sort_constructor_accessor)
(define-z3 _Z3_datatype_update_field (_fun _Z3_context _Z3_func_decl _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_datatype_update_field)
(define-z3 _Z3_get_relation_arity (_fun _Z3_context _Z3_sort -> _uint) #:c-id Z3_get_relation_arity)
(define-z3 _Z3_get_relation_column (_fun _Z3_context _Z3_sort _uint -> _Z3_sort) #:c-id Z3_get_relation_column)
(define-z3 _Z3_mk_atmost (_fun _Z3_context _uint _pointer _uint -> _Z3_ast) #:c-id Z3_mk_atmost)
(define-z3 _Z3_mk_atleast (_fun _Z3_context _uint _pointer _uint -> _Z3_ast) #:c-id Z3_mk_atleast)
(define-z3 _Z3_mk_pble (_fun _Z3_context _uint _pointer _pointer _int -> _Z3_ast) #:c-id Z3_mk_pble)
(define-z3 _Z3_mk_pbge (_fun _Z3_context _uint _pointer _pointer _int -> _Z3_ast) #:c-id Z3_mk_pbge)
(define-z3 _Z3_mk_pbeq (_fun _Z3_context _uint _pointer _pointer _int -> _Z3_ast) #:c-id Z3_mk_pbeq)
(define-z3 _Z3_func_decl_to_ast (_fun _Z3_context _Z3_func_decl -> _Z3_ast) #:c-id Z3_func_decl_to_ast)
(define-z3 _Z3_is_eq_func_decl (_fun _Z3_context _Z3_func_decl _Z3_func_decl -> _bool) #:c-id Z3_is_eq_func_decl)
(define-z3 _Z3_get_func_decl_id (_fun _Z3_context _Z3_func_decl -> _uint) #:c-id Z3_get_func_decl_id)
(define-z3 _Z3_get_decl_name (_fun _Z3_context _Z3_func_decl -> _Z3_symbol) #:c-id Z3_get_decl_name)
(define-z3 _Z3_get_decl_kind (_fun _Z3_context _Z3_func_decl -> _Z3_decl_kind) #:c-id Z3_get_decl_kind)
(define-z3 _Z3_get_domain_size (_fun _Z3_context _Z3_func_decl -> _uint) #:c-id Z3_get_domain_size)
(define-z3 _Z3_get_arity (_fun _Z3_context _Z3_func_decl -> _uint) #:c-id Z3_get_arity)
(define-z3 _Z3_get_domain (_fun _Z3_context _Z3_func_decl _uint -> _Z3_sort) #:c-id Z3_get_domain)
(define-z3 _Z3_get_range (_fun _Z3_context _Z3_func_decl -> _Z3_sort) #:c-id Z3_get_range)
(define-z3 _Z3_get_decl_num_parameters (_fun _Z3_context _Z3_func_decl -> _uint) #:c-id Z3_get_decl_num_parameters)
(define-z3 _Z3_get_decl_parameter_kind (_fun _Z3_context _Z3_func_decl _uint -> _Z3_parameter_kind) #:c-id Z3_get_decl_parameter_kind)
(define-z3 _Z3_get_decl_int_parameter (_fun _Z3_context _Z3_func_decl _uint -> _int) #:c-id Z3_get_decl_int_parameter)
(define-z3 _Z3_get_decl_double_parameter (_fun _Z3_context _Z3_func_decl _uint -> _double) #:c-id Z3_get_decl_double_parameter)
(define-z3 _Z3_get_decl_symbol_parameter (_fun _Z3_context _Z3_func_decl _uint -> _Z3_symbol) #:c-id Z3_get_decl_symbol_parameter)
(define-z3 _Z3_get_decl_sort_parameter (_fun _Z3_context _Z3_func_decl _uint -> _Z3_sort) #:c-id Z3_get_decl_sort_parameter)
(define-z3 _Z3_get_decl_ast_parameter (_fun _Z3_context _Z3_func_decl _uint -> _Z3_ast) #:c-id Z3_get_decl_ast_parameter)
(define-z3 _Z3_get_decl_func_decl_parameter (_fun _Z3_context _Z3_func_decl _uint -> _Z3_func_decl) #:c-id Z3_get_decl_func_decl_parameter)
(define-z3 _Z3_get_decl_rational_parameter (_fun _Z3_context _Z3_func_decl _uint -> _string/utf-8) #:c-id Z3_get_decl_rational_parameter)
(define-z3 _Z3_app_to_ast (_fun _Z3_context _Z3_app -> _Z3_ast) #:c-id Z3_app_to_ast)
(define-z3 _Z3_get_app_decl (_fun _Z3_context _Z3_app -> _Z3_func_decl) #:c-id Z3_get_app_decl)
(define-z3 _Z3_get_app_num_args (_fun _Z3_context _Z3_app -> _uint) #:c-id Z3_get_app_num_args)
(define-z3 _Z3_get_app_arg (_fun _Z3_context _Z3_app _uint -> _Z3_ast) #:c-id Z3_get_app_arg)
(define-z3 _Z3_is_eq_ast (_fun _Z3_context _Z3_ast _Z3_ast -> _bool) #:c-id Z3_is_eq_ast)
(define-z3 _Z3_get_ast_id (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_ast_id)
(define-z3 _Z3_get_ast_hash (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_ast_hash)
(define-z3 _Z3_get_sort (_fun _Z3_context _Z3_ast -> _Z3_sort) #:c-id Z3_get_sort)
(define-z3 _Z3_is_well_sorted (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_well_sorted)
(define-z3 _Z3_get_bool_value (_fun _Z3_context _Z3_ast -> _Z3_lbool) #:c-id Z3_get_bool_value)
(define-z3 _Z3_get_ast_kind (_fun _Z3_context _Z3_ast -> _Z3_ast_kind) #:c-id Z3_get_ast_kind)
(define-z3 _Z3_is_app (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_app)
(define-z3 _Z3_is_ground (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_ground)
(define-z3 _Z3_get_depth (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_depth)
(define-z3 _Z3_is_numeral_ast (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_numeral_ast)
(define-z3 _Z3_is_algebraic_number (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_algebraic_number)
(define-z3 _Z3_to_app (_fun _Z3_context _Z3_ast -> _Z3_app) #:c-id Z3_to_app)
(define-z3 _Z3_to_func_decl (_fun _Z3_context _Z3_ast -> _Z3_func_decl) #:c-id Z3_to_func_decl)
(define-z3 _Z3_get_numeral_string (_fun _Z3_context _Z3_ast -> _string/utf-8) #:c-id Z3_get_numeral_string)
(define-z3 _Z3_get_numeral_binary_string (_fun _Z3_context _Z3_ast -> _string/utf-8) #:c-id Z3_get_numeral_binary_string)
(define-z3 _Z3_get_numeral_decimal_string (_fun _Z3_context _Z3_ast _uint -> _string/utf-8) #:c-id Z3_get_numeral_decimal_string)
(define-z3 _Z3_get_numeral_double (_fun _Z3_context _Z3_ast -> _double) #:c-id Z3_get_numeral_double)
(define-z3 _Z3_get_numerator (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_get_numerator)
(define-z3 _Z3_get_denominator (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_get_denominator)
(define-z3 _Z3_get_numeral_small (_fun _Z3_context _Z3_ast _pointer _pointer -> _bool) #:c-id Z3_get_numeral_small)
(define-z3 _Z3_get_numeral_int (_fun _Z3_context _Z3_ast _pointer -> _bool) #:c-id Z3_get_numeral_int)
(define-z3 _Z3_get_numeral_uint (_fun _Z3_context _Z3_ast _pointer -> _bool) #:c-id Z3_get_numeral_uint)
(define-z3 _Z3_get_numeral_uint64 (_fun _Z3_context _Z3_ast _pointer -> _bool) #:c-id Z3_get_numeral_uint64)
(define-z3 _Z3_get_numeral_int64 (_fun _Z3_context _Z3_ast _pointer -> _bool) #:c-id Z3_get_numeral_int64)
(define-z3 _Z3_get_numeral_rational_int64 (_fun _Z3_context _Z3_ast _pointer _pointer -> _bool) #:c-id Z3_get_numeral_rational_int64)
(define-z3 _Z3_get_algebraic_number_lower (_fun _Z3_context _Z3_ast _uint -> _Z3_ast) #:c-id Z3_get_algebraic_number_lower)
(define-z3 _Z3_get_algebraic_number_upper (_fun _Z3_context _Z3_ast _uint -> _Z3_ast) #:c-id Z3_get_algebraic_number_upper)
(define-z3 _Z3_pattern_to_ast (_fun _Z3_context _Z3_pattern -> _Z3_ast) #:c-id Z3_pattern_to_ast)
(define-z3 _Z3_get_pattern_num_terms (_fun _Z3_context _Z3_pattern -> _uint) #:c-id Z3_get_pattern_num_terms)
(define-z3 _Z3_get_pattern (_fun _Z3_context _Z3_pattern _uint -> _Z3_ast) #:c-id Z3_get_pattern)
(define-z3 _Z3_get_index_value (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_index_value)
(define-z3 _Z3_is_quantifier_forall (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_quantifier_forall)
(define-z3 _Z3_is_quantifier_exists (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_quantifier_exists)
(define-z3 _Z3_is_lambda (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_lambda)
(define-z3 _Z3_get_quantifier_weight (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_quantifier_weight)
(define-z3 _Z3_get_quantifier_skolem_id (_fun _Z3_context _Z3_ast -> _Z3_symbol) #:c-id Z3_get_quantifier_skolem_id)
(define-z3 _Z3_get_quantifier_id (_fun _Z3_context _Z3_ast -> _Z3_symbol) #:c-id Z3_get_quantifier_id)
(define-z3 _Z3_get_quantifier_num_patterns (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_quantifier_num_patterns)
(define-z3 _Z3_get_quantifier_pattern_ast (_fun _Z3_context _Z3_ast _uint -> _Z3_pattern) #:c-id Z3_get_quantifier_pattern_ast)
(define-z3 _Z3_get_quantifier_num_no_patterns (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_quantifier_num_no_patterns)
(define-z3 _Z3_get_quantifier_no_pattern_ast (_fun _Z3_context _Z3_ast _uint -> _Z3_ast) #:c-id Z3_get_quantifier_no_pattern_ast)
(define-z3 _Z3_get_quantifier_num_bound (_fun _Z3_context _Z3_ast -> _uint) #:c-id Z3_get_quantifier_num_bound)
(define-z3 _Z3_get_quantifier_bound_name (_fun _Z3_context _Z3_ast _uint -> _Z3_symbol) #:c-id Z3_get_quantifier_bound_name)
(define-z3 _Z3_get_quantifier_bound_sort (_fun _Z3_context _Z3_ast _uint -> _Z3_sort) #:c-id Z3_get_quantifier_bound_sort)
(define-z3 _Z3_get_quantifier_body (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_get_quantifier_body)
(define-z3 _Z3_simplify (_fun _Z3_context _Z3_ast -> _Z3_ast) #:c-id Z3_simplify)
(define-z3 _Z3_simplify_ex (_fun _Z3_context _Z3_ast _Z3_params -> _Z3_ast) #:c-id Z3_simplify_ex)
(define-z3 _Z3_simplify_get_help (_fun _Z3_context -> _string/utf-8) #:c-id Z3_simplify_get_help)
(define-z3 _Z3_simplify_get_param_descrs (_fun _Z3_context -> _Z3_param_descrs) #:c-id Z3_simplify_get_param_descrs)
(define-z3 _Z3_update_term (_fun _Z3_context _Z3_ast _uint _pointer -> _Z3_ast) #:c-id Z3_update_term)
(define-z3 _Z3_substitute (_fun _Z3_context _Z3_ast _uint _pointer _pointer -> _Z3_ast) #:c-id Z3_substitute)
(define-z3 _Z3_substitute_vars (_fun _Z3_context _Z3_ast _uint _pointer -> _Z3_ast) #:c-id Z3_substitute_vars)
(define-z3 _Z3_substitute_funs (_fun _Z3_context _Z3_ast _uint _pointer _pointer -> _Z3_ast) #:c-id Z3_substitute_funs)
(define-z3 _Z3_translate (_fun _Z3_context _Z3_ast _Z3_context -> _Z3_ast) #:c-id Z3_translate)
(define-z3 _Z3_mk_model (_fun _Z3_context -> _Z3_model) #:c-id Z3_mk_model)
(define-z3 _Z3_model_inc_ref (_fun _Z3_context _Z3_model -> _void) #:c-id Z3_model_inc_ref)
(define-z3 _Z3_model_dec_ref (_fun _Z3_context _Z3_model -> _void) #:c-id Z3_model_dec_ref)
(define-z3 _Z3_model_eval (_fun _Z3_context _Z3_model _Z3_ast _bool _pointer -> _bool) #:c-id Z3_model_eval)
(define-z3 _Z3_model_get_const_interp (_fun _Z3_context _Z3_model _Z3_func_decl -> _Z3_ast) #:c-id Z3_model_get_const_interp)
(define-z3 _Z3_model_has_interp (_fun _Z3_context _Z3_model _Z3_func_decl -> _bool) #:c-id Z3_model_has_interp)
(define-z3 _Z3_model_get_func_interp (_fun _Z3_context _Z3_model _Z3_func_decl -> _Z3_func_interp) #:c-id Z3_model_get_func_interp)
(define-z3 _Z3_model_get_num_consts (_fun _Z3_context _Z3_model -> _uint) #:c-id Z3_model_get_num_consts)
(define-z3 _Z3_model_get_const_decl (_fun _Z3_context _Z3_model _uint -> _Z3_func_decl) #:c-id Z3_model_get_const_decl)
(define-z3 _Z3_model_get_num_funcs (_fun _Z3_context _Z3_model -> _uint) #:c-id Z3_model_get_num_funcs)
(define-z3 _Z3_model_get_func_decl (_fun _Z3_context _Z3_model _uint -> _Z3_func_decl) #:c-id Z3_model_get_func_decl)
(define-z3 _Z3_model_get_num_sorts (_fun _Z3_context _Z3_model -> _uint) #:c-id Z3_model_get_num_sorts)
(define-z3 _Z3_model_get_sort (_fun _Z3_context _Z3_model _uint -> _Z3_sort) #:c-id Z3_model_get_sort)
(define-z3 _Z3_model_get_sort_universe (_fun _Z3_context _Z3_model _Z3_sort -> _Z3_ast_vector) #:c-id Z3_model_get_sort_universe)
(define-z3 _Z3_model_translate (_fun _Z3_context _Z3_model _Z3_context -> _Z3_model) #:c-id Z3_model_translate)
(define-z3 _Z3_is_as_array (_fun _Z3_context _Z3_ast -> _bool) #:c-id Z3_is_as_array)
(define-z3 _Z3_get_as_array_func_decl (_fun _Z3_context _Z3_ast -> _Z3_func_decl) #:c-id Z3_get_as_array_func_decl)
(define-z3 _Z3_add_func_interp (_fun _Z3_context _Z3_model _Z3_func_decl _Z3_ast -> _Z3_func_interp) #:c-id Z3_add_func_interp)
(define-z3 _Z3_add_const_interp (_fun _Z3_context _Z3_model _Z3_func_decl _Z3_ast -> _void) #:c-id Z3_add_const_interp)
(define-z3 _Z3_func_interp_inc_ref (_fun _Z3_context _Z3_func_interp -> _void) #:c-id Z3_func_interp_inc_ref)
(define-z3 _Z3_func_interp_dec_ref (_fun _Z3_context _Z3_func_interp -> _void) #:c-id Z3_func_interp_dec_ref)
(define-z3 _Z3_func_interp_get_num_entries (_fun _Z3_context _Z3_func_interp -> _uint) #:c-id Z3_func_interp_get_num_entries)
(define-z3 _Z3_func_interp_get_entry (_fun _Z3_context _Z3_func_interp _uint -> _Z3_func_entry) #:c-id Z3_func_interp_get_entry)
(define-z3 _Z3_func_interp_get_else (_fun _Z3_context _Z3_func_interp -> _Z3_ast) #:c-id Z3_func_interp_get_else)
(define-z3 _Z3_func_interp_set_else (_fun _Z3_context _Z3_func_interp _Z3_ast -> _void) #:c-id Z3_func_interp_set_else)
(define-z3 _Z3_func_interp_get_arity (_fun _Z3_context _Z3_func_interp -> _uint) #:c-id Z3_func_interp_get_arity)
(define-z3 _Z3_func_interp_add_entry (_fun _Z3_context _Z3_func_interp _Z3_ast_vector _Z3_ast -> _void) #:c-id Z3_func_interp_add_entry)
(define-z3 _Z3_func_entry_inc_ref (_fun _Z3_context _Z3_func_entry -> _void) #:c-id Z3_func_entry_inc_ref)
(define-z3 _Z3_func_entry_dec_ref (_fun _Z3_context _Z3_func_entry -> _void) #:c-id Z3_func_entry_dec_ref)
(define-z3 _Z3_func_entry_get_value (_fun _Z3_context _Z3_func_entry -> _Z3_ast) #:c-id Z3_func_entry_get_value)
(define-z3 _Z3_func_entry_get_num_args (_fun _Z3_context _Z3_func_entry -> _uint) #:c-id Z3_func_entry_get_num_args)
(define-z3 _Z3_func_entry_get_arg (_fun _Z3_context _Z3_func_entry _uint -> _Z3_ast) #:c-id Z3_func_entry_get_arg)
(define-z3 _Z3_open_log (_fun _string/utf-8 -> _bool) #:c-id Z3_open_log)
(define-z3 _Z3_append_log (_fun _string/utf-8 -> _void) #:c-id Z3_append_log)
(define-z3 _Z3_close_log (_fun -> _void) #:c-id Z3_close_log)
(define-z3 _Z3_toggle_warning_messages (_fun _bool -> _void) #:c-id Z3_toggle_warning_messages)
(define-z3 _Z3_set_ast_print_mode (_fun _Z3_context _Z3_ast_print_mode -> _void) #:c-id Z3_set_ast_print_mode)
(define-z3 _Z3_ast_to_string (_fun _Z3_context _Z3_ast -> _string/utf-8) #:c-id Z3_ast_to_string)
(define-z3 _Z3_pattern_to_string (_fun _Z3_context _Z3_pattern -> _string/utf-8) #:c-id Z3_pattern_to_string)
(define-z3 _Z3_sort_to_string (_fun _Z3_context _Z3_sort -> _string/utf-8) #:c-id Z3_sort_to_string)
(define-z3 _Z3_func_decl_to_string (_fun _Z3_context _Z3_func_decl -> _string/utf-8) #:c-id Z3_func_decl_to_string)
(define-z3 _Z3_model_to_string (_fun _Z3_context _Z3_model -> _string/utf-8) #:c-id Z3_model_to_string)
(define-z3 _Z3_benchmark_to_smtlib_string (_fun _Z3_context _string/utf-8 _string/utf-8 _string/utf-8 _string/utf-8 _uint _pointer _Z3_ast -> _string/utf-8) #:c-id Z3_benchmark_to_smtlib_string)
(define-z3 _Z3_parse_smtlib2_string (_fun _Z3_context _string/utf-8 _uint _pointer _pointer _uint _pointer _pointer -> _Z3_ast_vector) #:c-id Z3_parse_smtlib2_string)
(define-z3 _Z3_parse_smtlib2_file (_fun _Z3_context _string/utf-8 _uint _pointer _pointer _uint _pointer _pointer -> _Z3_ast_vector) #:c-id Z3_parse_smtlib2_file)
(define-z3 _Z3_eval_smtlib2_string (_fun _Z3_context _string/utf-8 -> _string/utf-8) #:c-id Z3_eval_smtlib2_string)
(define-z3 _Z3_mk_parser_context (_fun _Z3_context -> _Z3_parser_context) #:c-id Z3_mk_parser_context)
(define-z3 _Z3_parser_context_inc_ref (_fun _Z3_context _Z3_parser_context -> _void) #:c-id Z3_parser_context_inc_ref)
(define-z3 _Z3_parser_context_dec_ref (_fun _Z3_context _Z3_parser_context -> _void) #:c-id Z3_parser_context_dec_ref)
(define-z3 _Z3_parser_context_add_sort (_fun _Z3_context _Z3_parser_context _Z3_sort -> _void) #:c-id Z3_parser_context_add_sort)
(define-z3 _Z3_parser_context_add_decl (_fun _Z3_context _Z3_parser_context _Z3_func_decl -> _void) #:c-id Z3_parser_context_add_decl)
(define-z3 _Z3_parser_context_from_string (_fun _Z3_context _Z3_parser_context _string/utf-8 -> _Z3_ast_vector) #:c-id Z3_parser_context_from_string)
(define-z3 _Z3_get_error_code (_fun _Z3_context -> _Z3_error_code) #:c-id Z3_get_error_code)
(define-z3 _Z3_set_error_handler (_fun _Z3_context _pointer -> _void) #:c-id Z3_set_error_handler)
(define-z3 _Z3_set_error (_fun _Z3_context _Z3_error_code -> _void) #:c-id Z3_set_error)
(define-z3 _Z3_get_error_msg (_fun _Z3_context _Z3_error_code -> _string/utf-8) #:c-id Z3_get_error_msg)
(define-z3 _Z3_get_version (_fun _pointer _pointer _pointer _pointer -> _void) #:c-id Z3_get_version)
(define-z3 _Z3_get_full_version (_fun -> _string/utf-8) #:c-id Z3_get_full_version)
(define-z3 _Z3_enable_trace (_fun _string/utf-8 -> _void) #:c-id Z3_enable_trace)
(define-z3 _Z3_disable_trace (_fun _string/utf-8 -> _void) #:c-id Z3_disable_trace)
(define-z3 _Z3_reset_memory (_fun -> _void) #:c-id Z3_reset_memory)
(define-z3 _Z3_finalize_memory (_fun -> _void) #:c-id Z3_finalize_memory)
(define-z3 _Z3_mk_goal (_fun _Z3_context _bool _bool _bool -> _Z3_goal) #:c-id Z3_mk_goal)
(define-z3 _Z3_goal_inc_ref (_fun _Z3_context _Z3_goal -> _void) #:c-id Z3_goal_inc_ref)
(define-z3 _Z3_goal_dec_ref (_fun _Z3_context _Z3_goal -> _void) #:c-id Z3_goal_dec_ref)
(define-z3 _Z3_goal_precision (_fun _Z3_context _Z3_goal -> _Z3_goal_prec) #:c-id Z3_goal_precision)
(define-z3 _Z3_goal_assert (_fun _Z3_context _Z3_goal _Z3_ast -> _void) #:c-id Z3_goal_assert)
(define-z3 _Z3_goal_inconsistent (_fun _Z3_context _Z3_goal -> _bool) #:c-id Z3_goal_inconsistent)
(define-z3 _Z3_goal_depth (_fun _Z3_context _Z3_goal -> _uint) #:c-id Z3_goal_depth)
(define-z3 _Z3_goal_reset (_fun _Z3_context _Z3_goal -> _void) #:c-id Z3_goal_reset)
(define-z3 _Z3_goal_size (_fun _Z3_context _Z3_goal -> _uint) #:c-id Z3_goal_size)
(define-z3 _Z3_goal_formula (_fun _Z3_context _Z3_goal _uint -> _Z3_ast) #:c-id Z3_goal_formula)
(define-z3 _Z3_goal_num_exprs (_fun _Z3_context _Z3_goal -> _uint) #:c-id Z3_goal_num_exprs)
(define-z3 _Z3_goal_is_decided_sat (_fun _Z3_context _Z3_goal -> _bool) #:c-id Z3_goal_is_decided_sat)
(define-z3 _Z3_goal_is_decided_unsat (_fun _Z3_context _Z3_goal -> _bool) #:c-id Z3_goal_is_decided_unsat)
(define-z3 _Z3_goal_translate (_fun _Z3_context _Z3_goal _Z3_context -> _Z3_goal) #:c-id Z3_goal_translate)
(define-z3 _Z3_goal_convert_model (_fun _Z3_context _Z3_goal _Z3_model -> _Z3_model) #:c-id Z3_goal_convert_model)
(define-z3 _Z3_goal_to_string (_fun _Z3_context _Z3_goal -> _string/utf-8) #:c-id Z3_goal_to_string)
(define-z3 _Z3_goal_to_dimacs_string (_fun _Z3_context _Z3_goal _bool -> _string/utf-8) #:c-id Z3_goal_to_dimacs_string)
(define-z3 _Z3_mk_tactic (_fun _Z3_context _string/utf-8 -> _Z3_tactic) #:c-id Z3_mk_tactic)
(define-z3 _Z3_tactic_inc_ref (_fun _Z3_context _Z3_tactic -> _void) #:c-id Z3_tactic_inc_ref)
(define-z3 _Z3_tactic_dec_ref (_fun _Z3_context _Z3_tactic -> _void) #:c-id Z3_tactic_dec_ref)
(define-z3 _Z3_mk_probe (_fun _Z3_context _string/utf-8 -> _Z3_probe) #:c-id Z3_mk_probe)
(define-z3 _Z3_probe_inc_ref (_fun _Z3_context _Z3_probe -> _void) #:c-id Z3_probe_inc_ref)
(define-z3 _Z3_probe_dec_ref (_fun _Z3_context _Z3_probe -> _void) #:c-id Z3_probe_dec_ref)
(define-z3 _Z3_tactic_and_then (_fun _Z3_context _Z3_tactic _Z3_tactic -> _Z3_tactic) #:c-id Z3_tactic_and_then)
(define-z3 _Z3_tactic_or_else (_fun _Z3_context _Z3_tactic _Z3_tactic -> _Z3_tactic) #:c-id Z3_tactic_or_else)
(define-z3 _Z3_tactic_par_or (_fun _Z3_context _uint _pointer -> _Z3_tactic) #:c-id Z3_tactic_par_or)
(define-z3 _Z3_tactic_par_and_then (_fun _Z3_context _Z3_tactic _Z3_tactic -> _Z3_tactic) #:c-id Z3_tactic_par_and_then)
(define-z3 _Z3_tactic_try_for (_fun _Z3_context _Z3_tactic _uint -> _Z3_tactic) #:c-id Z3_tactic_try_for)
(define-z3 _Z3_tactic_when (_fun _Z3_context _Z3_probe _Z3_tactic -> _Z3_tactic) #:c-id Z3_tactic_when)
(define-z3 _Z3_tactic_cond (_fun _Z3_context _Z3_probe _Z3_tactic _Z3_tactic -> _Z3_tactic) #:c-id Z3_tactic_cond)
(define-z3 _Z3_tactic_repeat (_fun _Z3_context _Z3_tactic _uint -> _Z3_tactic) #:c-id Z3_tactic_repeat)
(define-z3 _Z3_tactic_skip (_fun _Z3_context -> _Z3_tactic) #:c-id Z3_tactic_skip)
(define-z3 _Z3_tactic_fail (_fun _Z3_context -> _Z3_tactic) #:c-id Z3_tactic_fail)
(define-z3 _Z3_tactic_fail_if (_fun _Z3_context _Z3_probe -> _Z3_tactic) #:c-id Z3_tactic_fail_if)
(define-z3 _Z3_tactic_fail_if_not_decided (_fun _Z3_context -> _Z3_tactic) #:c-id Z3_tactic_fail_if_not_decided)
(define-z3 _Z3_tactic_using_params (_fun _Z3_context _Z3_tactic _Z3_params -> _Z3_tactic) #:c-id Z3_tactic_using_params)
(define-z3 _Z3_mk_simplifier (_fun _Z3_context _string/utf-8 -> _Z3_simplifier) #:c-id Z3_mk_simplifier)
(define-z3 _Z3_simplifier_inc_ref (_fun _Z3_context _Z3_simplifier -> _void) #:c-id Z3_simplifier_inc_ref)
(define-z3 _Z3_simplifier_dec_ref (_fun _Z3_context _Z3_simplifier -> _void) #:c-id Z3_simplifier_dec_ref)
(define-z3 _Z3_solver_add_simplifier (_fun _Z3_context _Z3_solver _Z3_simplifier -> _Z3_solver) #:c-id Z3_solver_add_simplifier)
(define-z3 _Z3_simplifier_and_then (_fun _Z3_context _Z3_simplifier _Z3_simplifier -> _Z3_simplifier) #:c-id Z3_simplifier_and_then)
(define-z3 _Z3_simplifier_using_params (_fun _Z3_context _Z3_simplifier _Z3_params -> _Z3_simplifier) #:c-id Z3_simplifier_using_params)
(define-z3 _Z3_get_num_simplifiers (_fun _Z3_context -> _uint) #:c-id Z3_get_num_simplifiers)
(define-z3 _Z3_get_simplifier_name (_fun _Z3_context _uint -> _string/utf-8) #:c-id Z3_get_simplifier_name)
(define-z3 _Z3_simplifier_get_help (_fun _Z3_context _Z3_simplifier -> _string/utf-8) #:c-id Z3_simplifier_get_help)
(define-z3 _Z3_simplifier_get_param_descrs (_fun _Z3_context _Z3_simplifier -> _Z3_param_descrs) #:c-id Z3_simplifier_get_param_descrs)
(define-z3 _Z3_simplifier_get_descr (_fun _Z3_context _string/utf-8 -> _string/utf-8) #:c-id Z3_simplifier_get_descr)
(define-z3 _Z3_probe_const (_fun _Z3_context _double -> _Z3_probe) #:c-id Z3_probe_const)
(define-z3 _Z3_probe_lt (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_lt)
(define-z3 _Z3_probe_gt (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_gt)
(define-z3 _Z3_probe_le (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_le)
(define-z3 _Z3_probe_ge (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_ge)
(define-z3 _Z3_probe_eq (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_eq)
(define-z3 _Z3_probe_and (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_and)
(define-z3 _Z3_probe_or (_fun _Z3_context _Z3_probe _Z3_probe -> _Z3_probe) #:c-id Z3_probe_or)
(define-z3 _Z3_probe_not (_fun _Z3_context _Z3_probe -> _Z3_probe) #:c-id Z3_probe_not)
(define-z3 _Z3_get_num_tactics (_fun _Z3_context -> _uint) #:c-id Z3_get_num_tactics)
(define-z3 _Z3_get_tactic_name (_fun _Z3_context _uint -> _string/utf-8) #:c-id Z3_get_tactic_name)
(define-z3 _Z3_get_num_probes (_fun _Z3_context -> _uint) #:c-id Z3_get_num_probes)
(define-z3 _Z3_get_probe_name (_fun _Z3_context _uint -> _string/utf-8) #:c-id Z3_get_probe_name)
(define-z3 _Z3_tactic_get_help (_fun _Z3_context _Z3_tactic -> _string/utf-8) #:c-id Z3_tactic_get_help)
(define-z3 _Z3_tactic_get_param_descrs (_fun _Z3_context _Z3_tactic -> _Z3_param_descrs) #:c-id Z3_tactic_get_param_descrs)
(define-z3 _Z3_tactic_get_descr (_fun _Z3_context _string/utf-8 -> _string/utf-8) #:c-id Z3_tactic_get_descr)
(define-z3 _Z3_probe_get_descr (_fun _Z3_context _string/utf-8 -> _string/utf-8) #:c-id Z3_probe_get_descr)
(define-z3 _Z3_probe_apply (_fun _Z3_context _Z3_probe _Z3_goal -> _double) #:c-id Z3_probe_apply)
(define-z3 _Z3_tactic_apply (_fun _Z3_context _Z3_tactic _Z3_goal -> _Z3_apply_result) #:c-id Z3_tactic_apply)
(define-z3 _Z3_tactic_apply_ex (_fun _Z3_context _Z3_tactic _Z3_goal _Z3_params -> _Z3_apply_result) #:c-id Z3_tactic_apply_ex)
(define-z3 _Z3_apply_result_inc_ref (_fun _Z3_context _Z3_apply_result -> _void) #:c-id Z3_apply_result_inc_ref)
(define-z3 _Z3_apply_result_dec_ref (_fun _Z3_context _Z3_apply_result -> _void) #:c-id Z3_apply_result_dec_ref)
(define-z3 _Z3_apply_result_to_string (_fun _Z3_context _Z3_apply_result -> _string/utf-8) #:c-id Z3_apply_result_to_string)
(define-z3 _Z3_apply_result_get_num_subgoals (_fun _Z3_context _Z3_apply_result -> _uint) #:c-id Z3_apply_result_get_num_subgoals)
(define-z3 _Z3_apply_result_get_subgoal (_fun _Z3_context _Z3_apply_result _uint -> _Z3_goal) #:c-id Z3_apply_result_get_subgoal)
(define-z3 _Z3_mk_solver (_fun _Z3_context -> _Z3_solver) #:c-id Z3_mk_solver)
(define-z3 _Z3_mk_simple_solver (_fun _Z3_context -> _Z3_solver) #:c-id Z3_mk_simple_solver)
(define-z3 _Z3_mk_solver_for_logic (_fun _Z3_context _Z3_symbol -> _Z3_solver) #:c-id Z3_mk_solver_for_logic)
(define-z3 _Z3_mk_solver_from_tactic (_fun _Z3_context _Z3_tactic -> _Z3_solver) #:c-id Z3_mk_solver_from_tactic)
(define-z3 _Z3_solver_translate (_fun _Z3_context _Z3_solver _Z3_context -> _Z3_solver) #:c-id Z3_solver_translate)
(define-z3 _Z3_solver_import_model_converter (_fun _Z3_context _Z3_solver _Z3_solver -> _void) #:c-id Z3_solver_import_model_converter)
(define-z3 _Z3_solver_get_help (_fun _Z3_context _Z3_solver -> _string/utf-8) #:c-id Z3_solver_get_help)
(define-z3 _Z3_solver_get_param_descrs (_fun _Z3_context _Z3_solver -> _Z3_param_descrs) #:c-id Z3_solver_get_param_descrs)
(define-z3 _Z3_solver_set_params (_fun _Z3_context _Z3_solver _Z3_params -> _void) #:c-id Z3_solver_set_params)
(define-z3 _Z3_solver_inc_ref (_fun _Z3_context _Z3_solver -> _void) #:c-id Z3_solver_inc_ref)
(define-z3 _Z3_solver_dec_ref (_fun _Z3_context _Z3_solver -> _void) #:c-id Z3_solver_dec_ref)
(define-z3 _Z3_solver_interrupt (_fun _Z3_context _Z3_solver -> _void) #:c-id Z3_solver_interrupt)
(define-z3 _Z3_solver_push (_fun _Z3_context _Z3_solver -> _void) #:c-id Z3_solver_push)
(define-z3 _Z3_solver_pop (_fun _Z3_context _Z3_solver _uint -> _void) #:c-id Z3_solver_pop)
(define-z3 _Z3_solver_reset (_fun _Z3_context _Z3_solver -> _void) #:c-id Z3_solver_reset)
(define-z3 _Z3_solver_get_num_scopes (_fun _Z3_context _Z3_solver -> _uint) #:c-id Z3_solver_get_num_scopes)
(define-z3 _Z3_solver_assert (_fun _Z3_context _Z3_solver _Z3_ast -> _void) #:c-id Z3_solver_assert)
(define-z3 _Z3_solver_assert_and_track (_fun _Z3_context _Z3_solver _Z3_ast _Z3_ast -> _void) #:c-id Z3_solver_assert_and_track)
(define-z3 _Z3_solver_from_file (_fun _Z3_context _Z3_solver _string/utf-8 -> _void) #:c-id Z3_solver_from_file)
(define-z3 _Z3_solver_from_string (_fun _Z3_context _Z3_solver _string/utf-8 -> _void) #:c-id Z3_solver_from_string)
(define-z3 _Z3_solver_get_assertions (_fun _Z3_context _Z3_solver -> _Z3_ast_vector) #:c-id Z3_solver_get_assertions)
(define-z3 _Z3_solver_get_units (_fun _Z3_context _Z3_solver -> _Z3_ast_vector) #:c-id Z3_solver_get_units)
(define-z3 _Z3_solver_get_trail (_fun _Z3_context _Z3_solver -> _Z3_ast_vector) #:c-id Z3_solver_get_trail)
(define-z3 _Z3_solver_get_non_units (_fun _Z3_context _Z3_solver -> _Z3_ast_vector) #:c-id Z3_solver_get_non_units)
(define-z3 _Z3_solver_get_levels (_fun _Z3_context _Z3_solver _Z3_ast_vector _uint _pointer -> _void) #:c-id Z3_solver_get_levels)
(define-z3 _Z3_solver_congruence_root (_fun _Z3_context _Z3_solver _Z3_ast -> _Z3_ast) #:c-id Z3_solver_congruence_root)
(define-z3 _Z3_solver_congruence_next (_fun _Z3_context _Z3_solver _Z3_ast -> _Z3_ast) #:c-id Z3_solver_congruence_next)
(define-z3 _Z3_solver_congruence_explain (_fun _Z3_context _Z3_solver _Z3_ast _Z3_ast -> _Z3_ast) #:c-id Z3_solver_congruence_explain)
(define-z3 _Z3_solver_solve_for (_fun _Z3_context _Z3_solver _Z3_ast_vector _Z3_ast_vector _Z3_ast_vector -> _void) #:c-id Z3_solver_solve_for)
(define-z3 _Z3_solver_register_on_clause (_fun _Z3_context _Z3_solver _pointer _pointer -> _void) #:c-id Z3_solver_register_on_clause)
(define-z3 _Z3_solver_propagate_init (_fun _Z3_context _Z3_solver _pointer _pointer _pointer _pointer -> _void) #:c-id Z3_solver_propagate_init)
(define-z3 _Z3_solver_propagate_fixed (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_fixed)
(define-z3 _Z3_solver_propagate_final (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_final)
(define-z3 _Z3_solver_propagate_eq (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_eq)
(define-z3 _Z3_solver_propagate_diseq (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_diseq)
(define-z3 _Z3_solver_propagate_created (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_created)
(define-z3 _Z3_solver_propagate_decide (_fun _Z3_context _Z3_solver _pointer -> _void) #:c-id Z3_solver_propagate_decide)
(define-z3 _Z3_solver_next_split (_fun _Z3_context _Z3_solver_callback _Z3_ast _uint _Z3_lbool -> _bool) #:c-id Z3_solver_next_split)
(define-z3 _Z3_solver_propagate_declare (_fun _Z3_context _Z3_symbol _uint _pointer _Z3_sort -> _Z3_func_decl) #:c-id Z3_solver_propagate_declare)
(define-z3 _Z3_solver_propagate_register (_fun _Z3_context _Z3_solver _Z3_ast -> _void) #:c-id Z3_solver_propagate_register)
(define-z3 _Z3_solver_propagate_register_cb (_fun _Z3_context _Z3_solver_callback _Z3_ast -> _void) #:c-id Z3_solver_propagate_register_cb)
(define-z3 _Z3_solver_propagate_consequence (_fun _Z3_context _Z3_solver_callback _uint _pointer _uint _pointer _pointer _Z3_ast -> _bool) #:c-id Z3_solver_propagate_consequence)
(define-z3 _Z3_solver_set_initial_value (_fun _Z3_context _Z3_solver _Z3_ast _Z3_ast -> _void) #:c-id Z3_solver_set_initial_value)
(define-z3 _Z3_solver_check (_fun _Z3_context _Z3_solver -> _Z3_lbool) #:c-id Z3_solver_check)
(define-z3 _Z3_solver_check_assumptions (_fun _Z3_context _Z3_solver _uint _pointer -> _Z3_lbool) #:c-id Z3_solver_check_assumptions)
(define-z3 _Z3_get_implied_equalities (_fun _Z3_context _Z3_solver _uint _pointer _pointer -> _Z3_lbool) #:c-id Z3_get_implied_equalities)
(define-z3 _Z3_solver_get_consequences (_fun _Z3_context _Z3_solver _Z3_ast_vector _Z3_ast_vector _Z3_ast_vector -> _Z3_lbool) #:c-id Z3_solver_get_consequences)
(define-z3 _Z3_solver_cube (_fun _Z3_context _Z3_solver _Z3_ast_vector _uint -> _Z3_ast_vector) #:c-id Z3_solver_cube)
(define-z3 _Z3_solver_get_model (_fun _Z3_context _Z3_solver -> _Z3_model) #:c-id Z3_solver_get_model)
(define-z3 _Z3_solver_get_proof (_fun _Z3_context _Z3_solver -> _Z3_ast) #:c-id Z3_solver_get_proof)
(define-z3 _Z3_solver_get_unsat_core (_fun _Z3_context _Z3_solver -> _Z3_ast_vector) #:c-id Z3_solver_get_unsat_core)
(define-z3 _Z3_solver_get_reason_unknown (_fun _Z3_context _Z3_solver -> _string/utf-8) #:c-id Z3_solver_get_reason_unknown)
(define-z3 _Z3_solver_get_statistics (_fun _Z3_context _Z3_solver -> _Z3_stats) #:c-id Z3_solver_get_statistics)
(define-z3 _Z3_solver_to_string (_fun _Z3_context _Z3_solver -> _string/utf-8) #:c-id Z3_solver_to_string)
(define-z3 _Z3_solver_to_dimacs_string (_fun _Z3_context _Z3_solver _bool -> _string/utf-8) #:c-id Z3_solver_to_dimacs_string)
(define-z3 _Z3_stats_to_string (_fun _Z3_context _Z3_stats -> _string/utf-8) #:c-id Z3_stats_to_string)
(define-z3 _Z3_stats_inc_ref (_fun _Z3_context _Z3_stats -> _void) #:c-id Z3_stats_inc_ref)
(define-z3 _Z3_stats_dec_ref (_fun _Z3_context _Z3_stats -> _void) #:c-id Z3_stats_dec_ref)
(define-z3 _Z3_stats_size (_fun _Z3_context _Z3_stats -> _uint) #:c-id Z3_stats_size)
(define-z3 _Z3_stats_get_key (_fun _Z3_context _Z3_stats _uint -> _string/utf-8) #:c-id Z3_stats_get_key)
(define-z3 _Z3_stats_is_uint (_fun _Z3_context _Z3_stats _uint -> _bool) #:c-id Z3_stats_is_uint)
(define-z3 _Z3_stats_is_double (_fun _Z3_context _Z3_stats _uint -> _bool) #:c-id Z3_stats_is_double)
(define-z3 _Z3_stats_get_uint_value (_fun _Z3_context _Z3_stats _uint -> _uint) #:c-id Z3_stats_get_uint_value)
(define-z3 _Z3_stats_get_double_value (_fun _Z3_context _Z3_stats _uint -> _double) #:c-id Z3_stats_get_double_value)
(define-z3 _Z3_get_estimated_alloc_size (_fun -> _uint64) #:c-id Z3_get_estimated_alloc_size)
(define-z3 _Z3_mk_optimize (_fun _Z3_context -> _Z3_optimize) #:c-id Z3_mk_optimize)
(define-z3 _Z3_optimize_inc_ref (_fun _Z3_context _Z3_optimize -> _void) #:c-id Z3_optimize_inc_ref)
(define-z3 _Z3_optimize_dec_ref (_fun _Z3_context _Z3_optimize -> _void) #:c-id Z3_optimize_dec_ref)
(define-z3 _Z3_optimize_assert (_fun _Z3_context _Z3_optimize _Z3_ast -> _void) #:c-id Z3_optimize_assert)
(define-z3 _Z3_optimize_assert_and_track (_fun _Z3_context _Z3_optimize _Z3_ast _Z3_ast -> _void) #:c-id Z3_optimize_assert_and_track)
(define-z3 _Z3_optimize_assert_soft (_fun _Z3_context _Z3_optimize _Z3_ast _string/utf-8 _Z3_symbol -> _uint) #:c-id Z3_optimize_assert_soft)
(define-z3 _Z3_optimize_maximize (_fun _Z3_context _Z3_optimize _Z3_ast -> _uint) #:c-id Z3_optimize_maximize)
(define-z3 _Z3_optimize_minimize (_fun _Z3_context _Z3_optimize _Z3_ast -> _uint) #:c-id Z3_optimize_minimize)
(define-z3 _Z3_optimize_push (_fun _Z3_context _Z3_optimize -> _void) #:c-id Z3_optimize_push)
(define-z3 _Z3_optimize_pop (_fun _Z3_context _Z3_optimize -> _void) #:c-id Z3_optimize_pop)
(define-z3 _Z3_optimize_set_initial_value (_fun _Z3_context _Z3_optimize _Z3_ast _Z3_ast -> _void) #:c-id Z3_optimize_set_initial_value)
(define-z3 _Z3_optimize_check (_fun _Z3_context _Z3_optimize _uint _pointer -> _Z3_lbool) #:c-id Z3_optimize_check)
(define-z3 _Z3_optimize_get_reason_unknown (_fun _Z3_context _Z3_optimize -> _string/utf-8) #:c-id Z3_optimize_get_reason_unknown)
(define-z3 _Z3_optimize_get_model (_fun _Z3_context _Z3_optimize -> _Z3_model) #:c-id Z3_optimize_get_model)
(define-z3 _Z3_optimize_get_unsat_core (_fun _Z3_context _Z3_optimize -> _Z3_ast_vector) #:c-id Z3_optimize_get_unsat_core)
(define-z3 _Z3_optimize_set_params (_fun _Z3_context _Z3_optimize _Z3_params -> _void) #:c-id Z3_optimize_set_params)
(define-z3 _Z3_optimize_get_param_descrs (_fun _Z3_context _Z3_optimize -> _Z3_param_descrs) #:c-id Z3_optimize_get_param_descrs)
(define-z3 _Z3_optimize_get_lower (_fun _Z3_context _Z3_optimize _uint -> _Z3_ast) #:c-id Z3_optimize_get_lower)
(define-z3 _Z3_optimize_get_upper (_fun _Z3_context _Z3_optimize _uint -> _Z3_ast) #:c-id Z3_optimize_get_upper)
(define-z3 _Z3_optimize_get_lower_as_vector (_fun _Z3_context _Z3_optimize _uint -> _Z3_ast_vector) #:c-id Z3_optimize_get_lower_as_vector)
(define-z3 _Z3_optimize_get_upper_as_vector (_fun _Z3_context _Z3_optimize _uint -> _Z3_ast_vector) #:c-id Z3_optimize_get_upper_as_vector)
(define-z3 _Z3_optimize_to_string (_fun _Z3_context _Z3_optimize -> _string/utf-8) #:c-id Z3_optimize_to_string)
(define-z3 _Z3_optimize_from_string (_fun _Z3_context _Z3_optimize _string/utf-8 -> _void) #:c-id Z3_optimize_from_string)
(define-z3 _Z3_optimize_from_file (_fun _Z3_context _Z3_optimize _string/utf-8 -> _void) #:c-id Z3_optimize_from_file)
(define-z3 _Z3_optimize_get_help (_fun _Z3_context _Z3_optimize -> _string/utf-8) #:c-id Z3_optimize_get_help)
(define-z3 _Z3_optimize_get_statistics (_fun _Z3_context _Z3_optimize -> _Z3_stats) #:c-id Z3_optimize_get_statistics)
(define-z3 _Z3_optimize_get_assertions (_fun _Z3_context _Z3_optimize -> _Z3_ast_vector) #:c-id Z3_optimize_get_assertions)
(define-z3 _Z3_optimize_get_objectives (_fun _Z3_context _Z3_optimize -> _Z3_ast_vector) #:c-id Z3_optimize_get_objectives)
(define-z3 _Z3_optimize_register_model_eh (_fun _Z3_context _Z3_optimize _Z3_model _pointer _pointer -> _void) #:c-id Z3_optimize_register_model_eh)

(provide (all-defined-out))
